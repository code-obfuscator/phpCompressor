<?php

namespace Genasyst\phpCompressor\PhpParser\Traverses\Entity\Object_;

use Genasyst\phpCompressor\PhpParser\Visitors\Base\ObjectLocalVariables;
use Genasyst\phpCompressor\PhpParser\Visitors\Traverser\FunctionVisitor;
use Genasyst\phpCompressor\PhpParser\Visitors\Traverser\GlobalVisitor;
use Genasyst\phpCompressor\PhpParser\Visitors\Traverser\ScopeVisitor;
use PhpParser\Node;

/**
 * @deprecated
 * Class ClassMethod
 * @package Genasyst\phpCompressor\PhpParser\Traverses\Entity\Object_
 */
class ClassMethod extends BaseObjectProperty
{
    protected $scope_object = null;

    public function __construct(Node\Stmt $node)
    {
        if (is_object($node->getAttribute('scope_object'))) {
            $this->scope_object = $node->getAttribute('scope_object');
        } else {
            $this->scope_object = new \Genasyst\phpCompressor\PhpParser\ScopeData\ScopeData($node);
        }
        echo "====================================================" . $node->name;

        parent::__construct($node);
    }

    protected function getVisitors()
    {
        return [
            new ObjectLocalVariables($this->scope_object),
            new ScopeVisitor($this->scope_object),
        ];
    }

    protected function initVisitors($traverser)
    {
        foreach ($this->getVisitors() as $visitor) {
            $traverser->addVisitor($visitor);
        }
    }

    public function getTraversers($node)
    {
        return parent::getTraverser($node); // TODO: Change the autogenerated stub
    }

    public function beforeTraverse()
    {
        $traverser = new \Genasyst\phpCompressor\PhpParser\Traverses\MethodTraverser('beforeNode');
        $this->initVisitors($traverser);
        // $traverser->traverse($this->data->params);
        $data = [&$this->data];
        $traverser->traverse($data);
        // var_dump($this->data->stmts);
        $this->data->setAttribute('scope_object', $this->scope_object);

    }

    public function traverse()
    {
//var_dump($this->data);
        $traverser = new \Genasyst\phpCompressor\PhpParser\Traverses\MethodTraverser('leaveNode');
        $this->initVisitors($traverser);
        $data = [&$this->data];
        $traverser->traverse($data);
        //var_dump($this->data->params);
    }

    public function afterTraverse()
    {
        // TODO: Implement afterTraverse() method.
    }

    public function getScopeObject()
    {
        return $this->scope_object;
    }


}